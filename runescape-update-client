#!/usr/bin/perl -w

# Be strict to avoid messy code
use strict;

# Make a variable to contain the users home folder
my $HOME;

# Get users homefolder
$HOME = $ENV{"HOME"};

# Make a variable to contain the client directory
my $clientdir = "$HOME/.config/runescape";

# Command to fetch the official Windows client
my $fetchcommand = "curl -L -o";

# Make the client folders
unless (-d "$clientdir/bin")
{
	system("mkdir -p \"$clientdir/bin\"");
}
unless (-d "$clientdir/share")
{
	system("mkdir -p \"$clientdir/share\"");
}

# Run the script
main();

sub main
{
	# Show user a notice about jagexappletviewer.jar. We use system() because Zenity does not print its return value, thus when using backticks we won't get any output.
	system("zenity --title=\"Information\" --question --window-icon=\"question\" --text=\"Due to legal reasons the file jagexappletviewer.jar is not available and/or downloadable in certain countries. For this script to work you must be able to download the official RuneScape client for extraction! 

Are you sure you want to update jagexappletviewer.jar \(from Jagex\) by using the official Windows client?\"");
	
	# If user answered yes (return value 0) then run the client update script and exit
	if ($? =~ 0)
	{
		# Make updating folder
		system("mkdir -p \"$clientdir/.updating/\"");

		# Check if p7zip is installed, otherwise compile it
		checkfor_p7zip();

		# Download and extract the jagexappletviewer from the official Windows client
		updatefromwindowsclient();

		# Clean up based on Operating System Linux
		system("rm -rf \"$clientdir/.updating/\"");

		# Tell user the update is done
		exec("zenity --title=\"Done!\" --info --text=\"Done running the update process! You can now launch the RuneScape script to start playing!\"");

		# Exit the script
		exit;
	}
	elsif ($? =~ 1)
	{
		# Exit the script
		exit;
	}
}

sub checkfor_p7zip
{
	# Test for system installed p7zip
	my $testp7zipsys = `7z`;

	# If we do not have p7zip
	if ($testp7zipsys !~ /7z/)
	{
		# Send user a warning telling p7zip is not installed
		exec("zenity --title=\"No p7zip found.\" --window-icon=\"error\" --error --text=\"I was unable to find the p7zip binary!
Please install the p7zip binary to continue.\"");
	}
}

sub updatefromwindowsclient
{
	# Download the Windows client
	system("$fetchcommand \"$clientdir/.updating/runescape.msi\" http://www.runescape.com/downloads/runescape.msi | zenity --title=\"Downloading the official RuneScape client from Jagex\" --progress --text=\"The script is now downloading the official RuneScape client from Jagex. Please wait...\" --pulsate --auto-kill --auto-close");

	# Check if we can extract the jagexappletviewer.jar directly
	my $jarfile = `cd \"$clientdir/.updating/\" && 7z l runescape.msi | grep "JagexAppletViewerJarFile*" | cut -c54-1000`;

	# Remove newlines
	$jarfile =~ s/(\n|\r|\r\n)//g;

	# Extract jagexappletviewer.jag and capture its output so we can see if it failed or not
	my $extract = `cd \"$clientdir/.updating/\" && 7z e runescape.msi $jarfile`;

	# If extraction failed
	if ($extract !~ /Everything is Ok/)
	{
		print "$extract | zenity --title=\"Extraction failed\" --window-icon=\"error\" --text-info --width=510";
	}

	# Move jagexappletviewer.jar into place
	system("cp -v \"$clientdir/.updating/$jarfile\" $clientdir/bin/jagexappletviewer.jar");
}

